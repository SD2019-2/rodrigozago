ORBit-Python 0.1.3 - Python bindings for ORBit
http://projects.sault.org/orbit-python

Jason Tackaberry <tack@linux.com> 
(Personal homepage: http://orion.dok.org)

=========


INSTALLATION
------------

Read the INSTALL file for a complete explanation, but the quick summary is:

   ./configure && make && make check && make install


Overview
--------

ORBit-Python is a project to develop Python bindings for ORBit.  I have chosen
this project as a topic for my undergraduate thesis for my computer science
degree.  I figured if I'm going to spend any significant amount of time on a
project, I should pick a topic that I can give back to the community.

For those of you who are wondering: yes, I have heard of the PyORBit project.
There are a number of reasons why I didn't simply contribute to PyORBit, but
the biggest reason for starting from scratch was the learning experience.  This
notwithstanding, I did borrow some code from them.  Also, plenty of cool ideas
and well-written code have been borrowed from Owen Taylor's Perl bindings.
Credit is certainly given here: buy Owen a keg of beer for his work.  :)

My final presentation for this project will be given in mid-April.  I'm
releasing this now in the hopes that I will get constructive feedback from the
development community.  Please email me at tack@linux.com with any comments,
suggestions, bug reports, or patches.


Features
--------

Python is an object-oriented, dynamically typed language.  These two features
make it quite ideal for seamless CORBA bindings.  Following in CORBA::ORBit (the
Perl bindings), ORBit-Python does away with the need for an IDL compiler.  Throw
away your stubs and skeletons! You simply call a function to load the IDL file
directly, and the appropriate objects and classes are created dynamically.

Most of the ORBit types are implemented, with the exception wide characters and
strings, fixed, and long double types.  Also, only a fairly small subset of the
POA is implemented.  Still, even in its current state, it should be usable for
most projects.

Many of the guidelines in the Python Language Mapping Specification have been
followed, while some have not.  I hope to eventually be compatible with this
specification.  Still, if there are mappings in ORBit-Python that you feel are
badly chosen, I will want to hear about it.  :)


Documentation
-------------

This project lacks any kind of documentation at the moment.  There is a test
suite in the src directory (test-suite.idl, test-client, and test-server) that
should show you have to do most things.

Documentation is forthcoming.  Stay tuned.


TODO
----

There are still a number of things that need to be done.  Please feel free to
submit patches for any of these.  If there's something I'm missing from this
list, do let me know.  

   - Go through the TODOs and FIXMEs in the source
   - Fixed type
   - Long Double type
   - Wide types (char and string)
   - Handle internal errors more gracefully (raise appropriate exceptions)
   - Better TypeCode support
   - Interface Repository support
   - Add classes/objects to import caller's namespace instead of __main__
     (I need help on this!)
   - Fix structs and exceptions so that they don't require keywords
   - More thorough testing
   - Documentation


---
This project is licensed under the LGPL (see COPYING for details).

March 18, 2000
Jason Tackaberry <tack@linux.com>

